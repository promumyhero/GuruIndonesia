// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  role            Role             @default(TEACHER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  students        Student[]
  subjects        Subject[]
  assessments     Assessment[]
  reportCards     ReportCard[]
  progressRecords ProgressRecord[]
}

model Student {
  id          String       @id @default(uuid())
  name        String
  nisn        String       @unique
  class       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teacher     User         @relation(fields: [teacherId], references: [id])
  teacherId   String
  assessments Assessment[]
  reportCards ReportCard[]
  progressRecords ProgressRecord[]
}

model Subject {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teacher     User         @relation(fields: [teacherId], references: [id])
  teacherId   String
  assessments Assessment[]
  progressRecords ProgressRecord[]
}

model Assessment {
  id           String         @id @default(uuid())
  value        Float
  type         AssessmentType
  semester     Int
  academicYear String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  student      Student        @relation(fields: [studentId], references: [id])
  studentId    String
  subject      Subject        @relation(fields: [subjectId], references: [id])
  subjectId    String
  teacher      User           @relation(fields: [teacherId], references: [id])
  teacherId    String
  reportCards  ReportCard[]
}

model ReportCard {
  id           String       @id @default(uuid())
  semester     Int
  academicYear String
  finalGrade   Float
  description  String       @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  student      Student      @relation(fields: [studentId], references: [id])
  studentId    String
  teacher      User         @relation(fields: [teacherId], references: [id])
  teacherId    String
  assessments  Assessment[]
}

model ProgressRecord {
  id           String   @id @default(uuid())
  date         DateTime
  score        Float
  month        Int
  quarter      Int
  semester     Int
  academicYear String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  subject      Subject  @relation(fields: [subjectId], references: [id])
  subjectId    String
  teacher      User     @relation(fields: [teacherId], references: [id])
  teacherId    String
}

enum Role {
  ADMIN
  TEACHER
}

enum AssessmentType {
  WEEKLY
  DAILY
  MIDTERM
  FINAL
}
